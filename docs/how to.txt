Note: as with most files in this module, this one is intended to be read with word wrap enabled.

I. Using MIDCA with simulated worlds using a predicate representation

1) Create a simple MIDCA version which allows text-based goals to be input at runtime

#set locations of files defining domain and world state
domainFilename = "myDomainFile"
stateFileName = "myStateFile"

from MIDCA.examples import predicateworld

myMIDCA = predicateworld.UserGoalsMidca(domainFilename, stateFileName)

2) See all phases in a MIDCA instance

print myMIDCA.get_phases()

3) Add/remove phases

myMidca.insert_phase(phaseName, i)
myMidca.append_phase(phaseName)
myMidca.remove_phase(phaseName) #throws ValueError if phase named phaseName not present

4) See the classes that are implementing a phase

print myMidca.get_modules(phaseName)

5) Create a custom phase implementation (module):

-Create a python class with at least these two methods:

	init(self, world, mem)
	run(self, cycle, verbose)

	-world is the initial world state
	-mem is MIDCAâ€™s central memory

	-cycle is the cycle # (starting with 1)
	-verbose is the level of output requested

	-the init method should do any setup the module requires. It will be called once for each module during MIDCA's initialization. Init methods will be called in phase order.

	-the run method will be called once per cycle in phase order. This method will define what the module actually does. Within a phase, modules will be called in the order listed, which can be modified as shown in 6.

For examples, see MIDCA/modules/*

6) Add/remove custom or predefined modules to/from MIDCA

myModule = MyModule() #
assert hasattr(myModule, 'run') and hasattr(myModule, 'init')

myMidca.append_module(phaseName, myModule)
myMidca.insert_module(phaseName, myModule, i) 
#i is the index of where this module should be placed during the phase. This is for ordering when more than one module is used in a single phase.

myMidca.clear_phase(phaseName) #removes all modules implementing the phase

7) initalize

myMidca.init()

8) run in interactive mode

myMidca.run()





(defdomain UMC
 (

     (:method (achieve-goals (list ?goal . ?goals))
     ()
     ((achieve-goal ?goal)(achieve-goals ?goals)))

    (:method (achieve-goals nil ?goal)
             ()
             ((achieve-goal ?goal)))

        (:method (achieve-goals nil)
             ()
             ())


 (:method (achieve-goal (at-location ?agent ?location))
  ;;; if the agent is at ga2 and the goal is to head to home2
 ((at-location ?agent ga2)
 (same ?location home1))
 ((!transit ?agent ga2 transit-area-2)
  (!transit ?agent transit-area-2 ?location)
 )
 )

  (:method (achieve-goal (hazard-checked ?agent ?mine ?location))

  ;;; if the goal is already achieved return empty plan
  ((hazard-checked ?agent ?mine ?location))
    ()

  ;;; remove mines
  ((hazard-at-location ?mine ?location))
  ((!remove ?mine ?location ?agent))
 )

  ;;; if the agent has any obstacle or mines avoid it or ignore it
  (:method (reach ?agent ?prevloc ?location)

  ;;; if there is a mine at the path avoid it
  ((hazard-at-pathway ?mine) (hazard-at-location ?mine ?location1))
  ((!avoid ?mine ?location1 ?agent)
   (reach ?agent ?prevloc ?location))

  ;;; if there is a mine not at the path ignore it
  ((hazard-at-location ?mine ?location1) (not(hazard-checked ?agent ?mine ?location1)))
  ((!ignore ?mine ?location1 ?agent)
   (reach ?agent ?prevloc ?location))

  ()
  ((!transit ?agent ?prevloc ?location))
 )

 (:method (achieve-goal (cleared-mines ?agent ?location))

 ;;; if the goal is already achieved give an empty plan
 ((cleared-mines ?agent ?location))
 ()

 ;;; if the agent is at home and the goal is to clear mines in ga1
 ((at-location ?agent home)
 (same ?location ga1))
 ((reach ?agent home transit-area-1)
  (reach ?agent transit-area-1 ga1)
  (!do-clear ?agent ga1)
 )

  ;;; if the agent is at home and the goal is to clear mines in ga2
 ((at-location ?agent home)
 (same ?location ga2))
 (
  (reach ?agent home qroute-transit-area-1)
  (reach ?agent qroute-transit-area-1 ga2)
  (!do-clear ?agent ga2)
 )

 ;;; if the agent is at transit-area-1 and the goal is to clear mines in ga1
 ((at-location ?agent transit-area-1)
 (same ?location ga1))
 ((reach ?agent transit-area-1 ga1)
  (!do-clear ?agent ga1)
 )

 ;;; if the agent is at transit-area-1 and the goal is to clear mines in ga2
 ((at-location ?agent transit-area-1)
 (same ?location ga2))
 ((reach ?agent transit-area-1 qroute-transit-area-1)
  (reach ?agent qroute-transit-area-1 ga2)
  (!do-clear ?agent ga2)
 )

   ;;; if the agent is at ga1 and the goal is to clear mines in ga1
 ((at-location ?agent ga1)
 (same ?location ga1))
 ((!do-clear ?agent ga1))

  ;;; if the agent is at ga1 and the goal is to clear mines in ga2
 ((at-location ?agent ga1)
 (same ?location ga2))
 ((reach ?agent ga1 qroute-transit-area-1)
  (reach ?agent qroute-transit-area-1 ga2)
  (!do-clear ?agent ga2))

  ;;; if the agent is at qroute-transit-area-1 and the goal is to clear mines in ga2
 ((at-location ?agent qroute-transit-area-1)
 (same ?location ga2))
 ((reach ?agent qroute-transit-area-1 ga2)
  (!do-clear ?agent ga2)
 )

 ;;; if the agent is at ga2 and the goal is to clear mines in ga2
 ((at-location ?agent ga2)
 (same ?location ga2))
 ((!do-clear ?agent ga2)
 )
 )

 (:operator (!transit ?agent ?prevlocation ?location)
 ((enabled ?agent) (at-location ?agent ?prevlocation) (not(at-location ?agent ?location)))
 ((at-location ?agent ?prevlocation))
 ((at-location ?agent ?location)))

 (:operator (!do-clear ?agent ?location)
 ((enabled ?agent) (at-location ?agent ?location))
 ()
 ((cleared-mines ?agent ?location)))

 (:operator (!avoid ?mine ?location ?uuv)
 ((enabled ?agent) (hazard-at-pathway ?mine))
 ((hazard-at-pathway ?mine))
 ((hazard-checked ?uuv ?mine ?location)))

 (:operator (!ignore ?mine ?location ?uuv)
 ((enabled ?agent) (hazard-at-location ?mine ?location))
 ()
 ((hazard-checked ?uuv ?mine ?location)))

 (:operator (!remove ?mine ?location ?uuv)
 ((enabled ?agent) (hazard-at-location ?mine ?location))
 ((hazard-at-location ?mine ?location) (hazard-at-pathway ?mine))
 ((hazard-checked ?uuv ?mine ?location)))


  (:- (same ?x ?x) ((call equal 1 1)))

))


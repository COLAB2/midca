# GraysReef domain (adapted from nbeacons domain)

type(DEPTH)
type(TILE)
type(AGENT)
type(FISH)
type(FISH-TYPE)
type(SENSOR)
type(CONFIDENCE)
type(DISTANCE)
type(NUM)
type(DIM)
type(BEACON)
type(BEACON-TYPE)
type(DATA)

predicate(collecteddata, [agnt, info, loc], [AGENT, DATA, TILE])
predicate(communicated, [agnt, agnt1, info, loc], [AGENT, AGENT, DATA, TILE])
predicate(agent-at, [agnt, loc], [AGENT, TILE])
predicate(probability-at, [loc, val], [TILE, NUM])
predicate(fish-at, [ftype, loc, conf], [FISH-TYPE, TILE, CONFIDENCE])
predicate(fish-from, [agnt, dist], [AGENT, DISTANCE])
predicate(agent-depth, [agnt, dpth], [AGENT, DEPTH])
predicate(at-surface, [agnt], [AGENT])
predicate(at-bottom, [agnt], [AGENT])
predicate(sensor-reading-at, [name,loc, conf], [SENSOR, TILE, CONFIDENCE])
predicate(adjacent-north, [loc1, loc2], [TILE, TILE])
predicate(adjacent-south, [loc1, loc2], [TILE, TILE])
predicate(adjacent-east, [loc1, loc2], [TILE, TILE])
predicate(adjacent-west, [loc1, loc2], [TILE, TILE])
predicate(stuck, [agnt], [AGENT])
predicate(mostly-stuck, [agnt], [AGENT])
predicate(somewhat-stuck, [agnt], [AGENT])
predicate(partly-stuck, [agnt], [AGENT])
predicate(barely-stuck, [agnt], [AGENT])
predicate(free, [agnt], [AGENT])
predicate(activated, [bcn], [BEACON])
predicate(quicksand, [loc], [TILE])
predicate(beacon-at, [bcn, loc], [BEACON, TILE])
predicate(beacon-type, [bcn, bcntyp], [BEACON, BEACON-TYPE])
predicate(activated, [bcn], [BEACON])

operator(movenorth,
args = [(agnt, AGENT), (start, TILE), (dest, TILE)],
preconditions = [
	condition(free, [agnt]),
	condition(agent-at, [agnt, start]),
	condition(adjacent-north, [start, dest])],
results = [
	condition(agent-at, [agnt, start], negate = TRUE),
	condition(agent-at, [agnt, dest])])

operator(movesouth,
args = [(agnt, AGENT), (start, TILE), (dest, TILE)],
preconditions = [
	condition(free, [agnt]),
	condition(agent-at, [agnt, start]),
	condition(adjacent-south, [start, dest])],
results = [
	condition(agent-at, [agnt, start], negate = TRUE),
	condition(agent-at, [agnt, dest])])

operator(moveeast,
args = [(agnt, AGENT), (start, TILE), (dest, TILE)],
preconditions = [
	condition(free, [agnt]),
	condition(agent-at, [agnt, start]),
	condition(adjacent-east, [start, dest])],
results = [
	condition(agent-at, [agnt, start], negate = TRUE),
	condition(agent-at, [agnt, dest])])

operator(movewest,
args = [(agnt, AGENT), (start, TILE), (dest, TILE)],
preconditions = [
	condition(free, [agnt]),
	condition(agent-at, [agnt, start]),
	condition(adjacent-west, [start, dest])],
results = [
	condition(agent-at, [agnt, start], negate = TRUE),
	condition(agent-at, [agnt, dest])])

operator(moveup,
args = [(agnt, AGENT), (start, DEPTH), (dest, DEPTH)],
preconditions = [
	condition(free, [agnt]),
	condition(agent-depth, [agnt, start]),
	condition(at-surface, [agnt], negate = TRUE)],
results = [
	condition(agent-depth, [agnt, start], negate = TRUE),
	condition(agent-depth, [agnt, dest])])

operator(movedown,
args = [(agnt, AGENT), (start, DEPTH), (dest, DEPTH)],
preconditions = [
	condition(free, [agnt]),
	condition(agent-depth, [agnt, start]),
	condition(at-bottom, [agnt], negate = TRUE)],
results = [
	condition(agent-depth, [agnt, start], negate = TRUE),
	condition(agent-depth, [agnt, dest])])

operator(get_fish_distance,
args = [(agnt, AGENT), (loc, TILE), (ftype, FISH-TYPE), (conf, CONFIDENCE), (dist, DISTANCE)],
preconditions = [
	condition(fish-at, [ftype, loc, conf])],
results = [
	condition(fish-from, [agnt, dist])])

operator(communicate,
args = [(agnt, AGENT), (agnt1, AGENT), (info, DATA), (loc, TILE)],
preconditions = [
	condition(free, [agnt]),
	condition(collecteddata, [agnt, info, loc])],
results = [
	condition(communicated, [agnt, agnt1, info, loc])])

operator(collectdata,
args = [(agnt, AGENT), (info, DATA), (loc, TILE)],
preconditions = [
	condition(free, [agnt]),
	condition(agent-at, [agnt, loc])],
results = [
	condition(collecteddata, [agnt, info, loc])])

operator(activatebeacon,
args = [(agnt, AGENT), (loc, TILE), (bcn, BEACON)],
preconditions = [
	condition(agent-at, [agnt, loc]),
	condition(beacon-at, [bcn, loc]),
	condition(activated, [bcn], negate = TRUE)],
results = [
	condition(activated, [bcn])])

# Note: this operator is not available to the agent via planning (i.e. pyhop)
operator(deactivatebeacon,
args = [(bcn, BEACON)],
preconditions = [
	condition(activated, [bcn])],
results = [
	condition(activated, [bcn], negate = TRUE)])

operator(push1,
args = [(agnt, AGENT)],
preconditions = [
	condition(stuck, [agnt])],
results = [
	condition(stuck, [agnt], negate= TRUE),
	condition(mostly-stuck, [agnt])])

operator(push2,
args = [(agnt, AGENT)],
preconditions = [
	condition(mostly-stuck, [agnt])],
results = [
	condition(mostly-stuck, [agnt], negate= TRUE),
	condition(somewhat-stuck, [agnt])])
	
operator(push3,
args = [(agnt, AGENT)],
preconditions = [
	condition(somewhat-stuck, [agnt])],
results = [
	condition(somewhat-stuck, [agnt], negate= TRUE),
	condition(partly-stuck, [agnt])])
	
operator(push4,
args = [(agnt, AGENT)],
preconditions = [
	condition(partly-stuck, [agnt])],
results = [
	condition(partly-stuck, [agnt], negate= TRUE),
	condition(barely-stuck, [agnt])])

operator(push5,
args = [(agnt, AGENT)],
preconditions = [
	condition(barely-stuck, [agnt])],
results = [
	condition(barely-stuck, [agnt], negate= TRUE),
	condition(free, [agnt])])
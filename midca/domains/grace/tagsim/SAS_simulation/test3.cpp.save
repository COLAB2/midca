y
/*
    ergodic_iSAC_exploration: Real-time receding horizon ergodic exploration.
    Copyright (C) 2017 Anastasia Mavrommati

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <master.hpp>               // Master include file
#include <unistd.h> 
#include <stdio.h> 
#include <sys/socket.h> 
#include <stdlib.h> 
#include <netinet/in.h> 
#include <string.h> 
#include <sstream>
#include <algorithm>
#include <iterator>
#include <ctime> //for timing
#include <gp.h>
#include <rprop.h>

using namespace sac;
using namespace libgp;

template <class Container>
void split1(const std::string& str, Container& cont)
{
    std::istringstream iss(str);
    std::copy(std::istream_iterator<std::string>(iss),
         std::istream_iterator<std::string>(),
         std::back_inserter(cont));
}
/* iSACstep() function operator
  input:  initial state and time
  return: Does not explicitly return anything but the following fields of class "sac_step" can be accessed

  iSACstep.xnext - integrated state at time t0+ts

  iSACstep.u_switch - vector of SAC action values applied from [t_i, t_f] which is a subset of [t0, t0+ts].
          If [t_i, t_f] is not equal to [t0, t0+ts] then the default control is applied over the remaining interval. 
  t_i - initial time for application of the control.  t0 <= t_i <= t0+ts
  t_f - final time for control application.  t0 <= t_f <= t0+ts

  WARNING: iSACstep.u_switch is only applied when t_f-t_i > 0, otherwise u_default is applied.
  WARNING: If [t_i, t_f] is not equal to [t0, t0+ts] then u_default is applied 
           over the remaining interval.
  NOTE: for speed return and input types should be changed and passed as
        references / pointers
*/

#define PORT 8080
int main(int /* argc */ , char** /* argv */ )
{
	using namespace std;
	/*********************************************/
	/* Vars etc*/
	isac_step iSACstep;//instance 
	state_type x0(xlen);
	Eigen::Matrix< double, xlen, 1 > xnext;//for prints
	int i;
	float x,y,rate;
	std::vector<std::string>  holder;
	ofstream myfile;
  	myfile.open ("./data/states.csv");//open file to save stuff
    
	 //used for EID
	 // initialize Gaussian process for 2-D input using the squared exponential 
     // covariance function with additive white noise.
     GaussianProcess gp(2, "CovSum ( CovSEiso, CovNoise)");
	 // initialize hyper parameter vector
     Eigen::VectorXd params(gp.covf().get_param_dim());
     params << 0.0, 0.0, -2.0;
     // set parameters of covariance function
     gp.covf().set_loghyper(params);
	/*********************************************/



    char buff[1024];
	int master_sock;
    int addrlen , new_socket;
	int opt = 1;
	
	//create unix domain socket
	master_sock = socket(AF_INET,SOCK_STREAM,0);
	struct sockaddr_in addr;
	memset(&addr,0,sizeof(addr));
    addr.sin_addr.s_addr = INADDR_ANY; 
	addrlen = sizeof(addr);
	if(setsockopt(master_sock, SOL_SOCKET, SO_REUSEADDR | SO_REUSEPORT, 
                                                  &opt, sizeof(opt)))
	{ 
        perror("setsockopt"); 
        exit(EXIT_FAILURE); 
    }
	addr.sin_family = AF_INET;
	addr.sin_addr.s_addr = INADDR_ANY; 
    addr.sin_port = htons( PORT );
	
	if ((bind(master_sock, (struct sockaddr *)&addr, sizeof(addr))) == -1){
                //fprintf(stderr, "Error on bind --> %s", strerror(errno));
				perror("binding");
                exit(EXIT_FAILURE);//exit(-1);return;
    }
	if (listen(master_sock, 3) < 0){   
        perror("listen");   
        exit(EXIT_FAILURE);   
    }
    if ((new_socket = accept(master_sock,(struct sockaddr *)&addr, (socklen_t*)&addrlen))<0) {   
		perror("accept error"); 
	} 
	/*********************************************/
	
	/* Initializations*/
	//get state from simulation	
	size_t sz;
	read(new_socket,buff, sizeof(buff));
	split1(buff, holder);
	cout << buff <<"," <<holder.back()<<"\n";
	for (i=0; i < xlen; ++i) { x0[i] = std::stof (holder[i],&sz);cout << i <<","<< holder[i] << "\n";}
	//send(new_socket,"get_state",strlen("get_state"),MSG_NOSIGNAL);
	/* Receding horizon loop*/
	double t0 = t_init;
	bool run = true;
	while (run){
	//while (t0 < 60 ){
		t0 = std::stof (holder[xlen],&sz);
		/* Perform SAC iteration - updates: J0, Jn, u, x_intp */
		iSACstep( t0, x0 );
		
		//Prints
		State2Mat( iSACstep.xnext, xnext ); // convert state to matrix form to be able to print state directly
		myfile << t0 << " " << xnext.transpose() << "\n";//write to file
		cout << t0 << ", " << iSACstep.xnext[0] << ", " << iSACstep.xnext[1] << ", " << iSACstep.u_switch[0] << ", " << iSACstep.u_switch[1] << "\n";
		// send control to simulation
		std::string msg = std::to_string(iSACstep.u_switch[0])+","+std::to_string(iSACstep.u_switch[1]);
		send(new_socket,msg.c_str(),msg.size(),MSG_NOSIGNAL);
		//for (i=0; i < iSACstep.x_vec.size(); ++i) {cout  << iSACstep.x_vec[i][0] <<","<< iSACstep.x_vec[i][1] <<"\n";}	
		//cout  << "\n";
		
		for(i=0; i<erg_dim; ++i) {
			if((iSACstep.xnext[indices[i]] > ranges[i][1])||(iSACstep.xnext[indices[i]] < ranges[i][0])) {
				std::cout << "Out of bounds" <<"\n";
				system("pause");}
		}
		//get new state from simulation	
	    read(new_socket,buff, sizeof(buff));
		split1(buff, holder);
		cout << buff << "\n";
		if (holder.front().compare("end")==0){
			cout << buff << "\n";
			run=false;
		}
	    for (i=0; i < xlen; ++i) { x0[i] = std::stof (holder[i],&sz);}
		double pos[] = {x0[0], x0[1]};
		rate = std::stof (holder.back(),&sz);
        gp.add_pattern(pos, rate);
	}




	myfile.close();//close file



	return 0;
}







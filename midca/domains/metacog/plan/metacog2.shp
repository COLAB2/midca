(defdomain metacognition
 (

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (:method (cognitive-loop nil)

      ; if there is a request from other agent
      ((requested ?other-agent ?agent ?goal))
      ((interpret ?agent ?goal)
        (evaluate ?agent ?goal)
        (select ?agent ?goal)
        (plan ?agent ?goal)
        (act ?agent ?goal)
        (cognitive-loop nil)
        )

      ; else do nothing
      ()
      ()
      )








;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; Phases ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  (:method (interpret ?agent ?goal)

    ; if there is a goal put it in the goalGraph
     ((not(intend ?agent ?goal))
      (requested ?other-agent ?agent ?goal))
        ((!generate-goal ?agent ?goal))

    ; else do nothing
      ()
      ()
    )

 (:method (evaluate ?agent ?goal)

    ; if the goal requested by other agent is achieved remove the goal
    ; and remove the request
     ((intend ?agent ?goal)
      (active-goal ?agent ?goal)
      (requested ?other-agent ?agent ?goal)
      (states ?atom)
      (same ?atom ?goal)
      ;(forall ?atom (states ?atom) (call equal ?atom ?goal))
      )
        ((!remove-goal ?agent ?goal)

         ;(!remove-plan ?agent ?goal)

         (!remove-request ?other-agent ?agent ?goal))


    ; if the goal is achieved remove it from the goals
    ((intend ?agent ?goal)
     (active-goal ?agent ?goal)
     ;(forall ?atom (states ?atom) (call equal ?atom ?goal))
     (states ?atom)
     (same ?atom ?goal)
     )
        ((!remove-goal ?agent ?goal))

    ; nothing if there is no active goal
     ((not(active-goal ?agent ?goal)))
     ()

    )


 (:method (select ?agent ?goals)

    ; if there is a higher priority goal select the priority goal
    ; to do later

    ; if there is an active goal do nothing
    ((active-goal ?agent ?goal))
        ()

    ; if there is no active goal and no intention do nothing
    ( (not(active-goal ?agent ?goal))
      (not(intend ?agent ?goal)))
     ()

    ; select a goal if there isn't an active goal but agent intends one
     ((intend ?agent ?goal)
      (not(active-goal ?agent ?goal)))
        ((!select-goal ?agent ?goals))
    )


  (:method (plan ?agent ?goal)

      ; if there is no active goal do nothing
      ((not (active-goal ?agent ?goal)))
       ()

      ; if there is an active plan for the intended goal do nothing
      ((committed ?agent ?plan ?goal)
       (active-plan ?agent ?plan)
       (intend ?agent ?goal))
        ()

      ; if there is no active plan then create plan
      ((not(committed ?agent ?plan ?goal))
       (not(active-plan ?agent ?plan)))
       (
       (!create-plan ?agent ?goal)
       )

      ; replan if the current plan does not achieve the goal
      ; to-do later
   )

  (:method (act ?agent ?goal)

      ; if there is no active plan do nothing
      ((not(committed ?agent ?plan ?goal)))
       ()

      ; if it is not the last action apply action
      ((committed ?agent ?plan ?goal)
       (not(done ?agent ?action))
       (at ?action ?step ?plan)

       ; if there are more actions
       (at ?next-action ?next-step ?plan)
       (call > ?step ?next-step)

       ; not working
       ; if every action in the plan greater than the current action (?action) is not done
       ;(forall (at ?next-action ?next-step ?plan ) (and (call < ?next-step ?step) (done ?next-action)))
       )
       ; apply action
        ((!apply-action ?agent ?action ?goal))

      ; else it is the last action so apply action and remove commitment
      ((committed ?agent ?plan ?goal)
       (not(done ?agent ?action))
       (at ?action ?step ?plan)

       ; not working
       ;(forall  (at ?next-action ?next-step ?plan)  (call > ?next-step ?step))
       )
       ; apply action and remove commitment
        ((!apply-action ?agent ?action ?goal)
         (!remove-commitment ?agent ?plan ?goal))


   )


;;;;;;;;;;;;;;;;;;;;;;;;;interpret phase operators;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 (:operator (!generate-goal ?agent ?goal)
    ((not(intend ?agent ?goal)))
    ; delete list
    ()
     ;add list
     ((goals ?goal)
      (intend ?agent ?goal))
  )


;;;;;;;;;;;;;;;;;;;;;;;;;evaluate phase operators;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 (:operator (!remove-goal ?agent ?goal)
    ((intend ?agent ?goal)
     (active-goal ?agent ?goal))
    ; delete list
    ((intend ?agent ?goal)
      (active-goal ?agent ?goal))
     ;add list
     ((achieved ?agent ?goal))
  )

  (:operator (!remove-request ?other-agent ?agent ?goal)
    ((requested ?other-agent ?agent ?goal))
    ; delete list
    ((requested ?other-agent ?agent ?goal))
     ;add list
     ()
  )





;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;; intend phase operators;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (:operator (!select-goal ?agent ?goal)
    ()
    ; delete list
    ()
     ;add list
     ((intend ?agent ?goal)
      (active-goal ?agent ?goal))
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;; act phase operators;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

 (:operator (!remove-commitment ?agent ?plan ?goal)
    ((committed ?agent ?plan ?goal))
    ; delete list
    ((committed ?agent ?plan ?goal)
     (active-plan ?agent ?plan))
     ;add list
     ()
  )

 (:operator (!apply-action ?agent ?action ?goal)
    ((not(done ?agent ?action)))
    ; delete list
    ()
    ((done ?agent ?action)
     ;(changed ?state ?new-state ?action)
     (states ?goal)
     )
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


;;;;;;;;;;;;;;;;;;;; plan phase operators;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 (:operator (!create-plan ?agent ?goal)
    ; preconditions
    ((intend ?agent ?goal)
     ; there is no active and committed plans
     (not(active-plan ?agent ?plan))
     (not(committed ?agent ?plan ?goal))
     )
    ; delete list
    ()
    ; add list
    ((committed ?agent plan66 ?goal)
     (active-plan ?agent plan66)
     (at action1 0 plan66)
     )
  )

 (:- (same ?x ?x) ((call equal 1 1)))

 ))
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

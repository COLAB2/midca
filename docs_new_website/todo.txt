
I. Module creation and intialization
	1) Create a MidcaModule class which saves self.mem in the init function and raises a not-implemented error in the run method. Modify all existing modules to inherit from this class.
	2) Modify the base.py/MIDCA class so that it does not need to take a 'world' parameter, and does not pass the world to module constructors. This was used to initialize the perceive module in a simulated world, but that initialization should be done in the python constructor (__init__). Modify all existing modules to no longer expect a 'world' argument in their 'init()' method. Note that this overlaps with 1) in this section.

II. Logging
	1) Modify the logging system to get away from intercepting stdout. Currently the logging system works in two ways - a standard 'log' function that works as expected, and by intercepting messages to stdout and logging them. The latter of these is an artifact of past versions of the system and causes several problems. It would be better if print statements in all modules were replaced by log calls. One prerequisite for this would be a module-level log() method in logging.py that redirected calls to a singleton Logger - this should be easy to implement. The more time-consuming task will be to actually replace all print calls, especially since python 2 print syntax is unusual.
	2) Modify the logging system to handle the 'verbose' argument better. Currently this argument is passed to each module and used to determine how much output to print/log. It would be better if output was sent to the logger regardless and only the logger stored the verbose value. Then it could decide based on that value how much information to send to stdout and/or write to a log file. This would require an additional argument to a log method which determined the level of importance or urgency - akin to ROS's logwarn(), logerr(), loginfo(), etc.

III. Action
	1) Research item - come up with a system for a host system to pass MIDCA a set of possible actions. It would be necessary to include several pieces of information, including but not limited to: a) The name of the action, b) the rostopic or topics on which commands to execute the action should be posted, c) the types of feedback (e.g. error codes) that the action could generate, d) parameters for how long MIDCA should expect the action to last and what effects it might have, e) The format of the message to be sent on the specified topic, including command parameters. The system should be flexible enough to allow for changing the information given to MIDCA in future implementations.
	2) Research item - Given a scheme like the one described above, create a set of mechanisms for MIDCA to use the information to generate actions requests. A first step might be to simply have the ability to generate a valid command, even if it might not be useful or its execution might even be impossible. Later steps would include the ability to reason about which commands can be executed in a given world state. That information could then be used to inform planning. Note that this task must probably be refined into a less general version to be reasonably achievable with anything less than a major research effort.